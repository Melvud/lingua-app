// src/hooks/useLessonSync.ts
import { useState, useEffect, useRef } from 'react';
import { doc, onSnapshot, updateDoc, addDoc, collection, query, where, orderBy, getDocs, setDoc } from 'firebase/firestore';
import { db, auth } from '../config/firebase';
import type { VocabularyItem, Message, Task, Lesson, UserAnswersStore, AnnotationStore } from '../types';

interface SharedData {
  textbooks: Array<{ name: string; url: string }>;
  vocabulary: VocabularyItem[];
  currentPage: number;
  files: Array<{ name: string; url: string }>;
  instruction: string;
  selectedTextbookName?: string | null; 
  annotations?: AnnotationStore; 
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Firestore
const sanitizeForFirestore = (obj: any, depth = 0): any => {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
  if (depth > 10) {
    console.warn('‚ö†Ô∏è Max recursion depth reached');
    return null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ null –∏ undefined
  if (obj === null || obj === undefined) {
    return null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
  if (Array.isArray(obj)) {
    const cleaned = obj
      .filter(item => item !== null && item !== undefined && item !== '')
      .map(item => sanitizeForFirestore(item, depth + 1))
      .filter(item => item !== null);
    
    return cleaned.length > 0 ? cleaned : null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
  if (typeof obj === 'object' && obj !== null) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Date –æ–±—ä–µ–∫—Ç—ã (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ Firestore)
    if (obj instanceof Date) {
      return obj;
    }

    const result: any = {};
    let hasContent = false;

    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        const cleanedValue = sanitizeForFirestore(obj[key], depth + 1);
        
        if (cleanedValue !== null && cleanedValue !== undefined) {
          result[key] = cleanedValue;
          hasContent = true;
        }
      }
    }

    return hasContent ? result : null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
  if (typeof obj === 'string') {
    const trimmed = obj.trim();
    return trimmed.length > 0 ? trimmed : null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª –∏ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  if (typeof obj === 'number' || typeof obj === 'boolean') {
    return obj;
  }

  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
  console.warn('‚ö†Ô∏è Unknown type encountered:', typeof obj);
  return null;
};

export const useLessonSync = (lessonId?: string, pairId?: string) => {
  const [lessonData, setLessonData] = useState<Lesson | null>(null);
  const [sharedData, setSharedData] = useState<SharedData | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [userAnswers, setUserAnswers] = useState<UserAnswersStore>({});
  
  const userId = auth.currentUser?.uid;
  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isSavingRef = useRef<boolean>(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
  useEffect(() => {
    if (!lessonId) return;
    
    console.log('üìñ Setting up lesson listener for:', lessonId);
    const unsubscribe = onSnapshot(doc(db, 'lessons', lessonId), (doc) => {
      if (doc.exists()) {
        console.log('üìñ Lesson data loaded');
        setLessonData({ id: doc.id, ...doc.data() } as Lesson);
      }
    });
    
    return () => unsubscribe();
  }, [lessonId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
  useEffect(() => {
    if (!pairId) return;

    const q = query(collection(db, 'pairs'), where('pairId', '==', pairId));
    
    getDocs(q).then((snapshot) => {
      if (!snapshot.empty) {
        const unsubscribe = onSnapshot(doc(db, 'pairs', snapshot.docs[0].id), (doc) => {
          if (doc.exists()) {
            const data = doc.data();
            setSharedData(data.sharedData || {
              textbooks: [],
              vocabulary: [],
              currentPage: 1,
              files: [],
              instruction: '',
              selectedTextbookName: null,
              annotations: {} 
            });
          }
        });

        return () => unsubscribe();
      }
    });
  }, [pairId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  useEffect(() => {
    if (!lessonId) return;

    const q = query(
      collection(db, 'messages'),
      where('lessonId', '==', lessonId),
      orderBy('timestamp', 'asc')
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const msgs: Message[] = [];
      snapshot.forEach((doc) => {
        const data = doc.data(); 
        
        msgs.push({
          id: doc.id,
          text: data.text,
          timestamp: new Date(data.timestamp.toDate()).toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          }),
          user: {
            id: data.userId,
            name: data.userName,
            avatar: `https://i.pravatar.cc/150?u=${data.userId}`
          }
        });
      });
      setMessages(msgs);
    });

    return () => unsubscribe();
  }, [lessonId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!lessonId || !userId) {
      setUserAnswers({}); 
      return;
    }
    
    const docId = `${lessonId}_${userId}`;
    const docRef = doc(db, 'lessonUserAnswers', docId);

    console.log('üì• Setting up user answers listener for:', docId);

    const unsubscribe = onSnapshot(docRef, (doc) => {
      if (doc.exists()) {
        const data = doc.data().answers || {};
        console.log('üì• Loaded user answers from Firestore:', data);
        setUserAnswers(data);
      } else {
        console.log('üì≠ No user answers found in Firestore');
        setUserAnswers({});
      }
    }, (error) => {
      console.error('‚ùå Error loading user answers:', error);
    });

    return () => unsubscribe();
  }, [lessonId, userId]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
  const updatePairData = async (updates: Partial<SharedData>) => {
    if (!pairId || !sharedData) return; 

    const q = query(collection(db, 'pairs'), where('pairId', '==', pairId));
    const snapshot = await getDocs(q);
    
    if (!snapshot.empty) {
      const docRef = doc(db, 'pairs', snapshot.docs[0].id);
      await setDoc(docRef, {
        'sharedData': { ...sharedData, ...updates }
      }, { merge: true });
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–∫–∞
  const updateLessonTasks = async (tasks: Task[]) => {
    if (!lessonId) return;

    const completedCount = tasks.filter(t => t.status === 'completed').length;
    
    await updateDoc(doc(db, 'lessons', lessonId), {
      tasks,
      totalTasksCount: tasks.length,
      completedTasksCount: completedCount,
      updatedAt: new Date()
    });
  };

  // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserAnswers = (newAnswers: UserAnswersStore) => {
    if (!lessonId || !userId) {
      console.warn('‚ö†Ô∏è Cannot save: missing lessonId or userId');
      return;
    }
    
    console.log('üíæ updateUserAnswers called');
    console.log('üìä Raw data:', JSON.stringify(newAnswers, null, 2));
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    setUserAnswers(newAnswers);
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (saveTimeoutRef.current) {
      console.log('‚è±Ô∏è Cancelling previous save timer');
      clearTimeout(saveTimeoutRef.current);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    saveTimeoutRef.current = setTimeout(async () => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      if (isSavingRef.current) {
        console.log('‚è≥ Save already in progress, skipping');
        return;
      }

      isSavingRef.current = true;
      const docId = `${lessonId}_${userId}`;
      const docRef = doc(db, 'lessonUserAnswers', docId);
      
      try {
        console.log('üîÑ Starting save process...');
        console.log('üìù Document ID:', docId);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Firestore
        const sanitized = sanitizeForFirestore(newAnswers);
        
        console.log('üßπ Sanitized data:', JSON.stringify(sanitized, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        if (!sanitized || Object.keys(sanitized).length === 0) {
          console.log('‚ö†Ô∏è No valid data to save, skipping');
          isSavingRef.current = false;
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
        await setDoc(docRef, { 
          answers: sanitized,
          updatedAt: new Date()
        });
        
        console.log('‚úÖ Successfully saved to Firestore!');
        
      } catch (error: any) {
        console.error('‚ùå Failed to save user answers');
        console.error('Error object:', error);
        console.error('Error code:', error?.code);
        console.error('Error message:', error?.message);
        console.error('Error stack:', error?.stack);
      } finally {
        isSavingRef.current = false;
      }
    }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
  };

  const updateSharedFiles = (files: Array<{ name: string; url: string }>) => {
    updatePairData({ files });
  };

  const updateSharedInstruction = (instruction: string) => {
    updatePairData({ instruction });
  };

  const updateSharedVocabulary = (vocabulary: VocabularyItem[]) => {
    updatePairData({ vocabulary });
  };

  const updateSharedTextbooks = (textbooks: Array<{ name: string; url: string }>) => {
    updatePairData({ textbooks });
  };

  const updateSharedCurrentPage = (currentPage: number) => {
    updatePairData({ currentPage });
  };

  const updateSharedSelectedTextbook = (name: string | null) => {
    updatePairData({ selectedTextbookName: name });
  };
  
  const updateSharedAnnotations = (annotations: AnnotationStore) => {
    updatePairData({ annotations });
  };

  const sendMessage = async (text: string, userName: string) => {
    if (!lessonId) return;

    await addDoc(collection(db, 'messages'), {
      lessonId,
      userId: auth.currentUser?.uid,
      userName,
      text,
      timestamp: new Date()
    });
  };

  return {
    lessonData,
    sharedData,
    messages,
    userAnswers, 
    updateSharedFiles,
    updateSharedInstruction,
    updateSharedVocabulary,
    updateSharedTextbooks,
    updateSharedCurrentPage,
    updateSharedSelectedTextbook, 
    updateLessonTasks,
    updateUserAnswers,
    updateSharedAnnotations, 
    sendMessage
  };
};
