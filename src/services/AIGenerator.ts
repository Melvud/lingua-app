import { GoogleGenAI, Type } from "@google/genai";
import type { Task, VocabularyItem } from '../types';

console.log('üîë API Key from env:', process.env.API_KEY ? 'EXISTS' : 'NOT FOUND');

const model = 'gemini-2.5-flash';

const responseSchema = {
    type: Type.OBJECT,
    properties: {
        tasks: {
            type: Type.ARRAY,
            description: "–°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.",
            items: {
                type: Type.OBJECT,
                properties: {
                    instruction: { type: Type.STRING }, 
                    type: { type: Type.STRING, enum: ['written', 'oral'] },
                    pageNumber: { type: Type.STRING }, 
                    exerciseNumber: { type: Type.STRING },
                    items: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                type: { type: Type.STRING, enum: ['fill-in-the-blank', 'translate', 'plain-text'] },
                                textParts: {
                                    type: Type.ARRAY,
                                    items: {
                                        type: Type.OBJECT,
                                        properties: { 
                                            text: { type: Type.STRING }, 
                                            isAnswer: { type: Type.BOOLEAN } 
                                        },
                                        required: ['text', 'isAnswer']
                                    }
                                }
                            },
                            required: ['type', 'textParts']
                        }
                    }
                },
                required: ['instruction', 'type', 'items']
            }
        },
        vocabulary: {
            type: Type.ARRAY,
            description: "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å.",
            items: {
                type: Type.OBJECT,
                properties: {
                    word: { type: Type.STRING, description: "–°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º." },
                    translation: { type: Type.STRING, description: "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π." },
                    context: { type: Type.STRING, description: "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞." }
                },
                required: ['word', 'translation', 'context']
            }
        }
    }
};

interface AIResponse {
    tasks: Task[];
    vocabulary: VocabularyItem[];
}

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

async function retryWithBackoff<T>(
    fn: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 2000
): Promise<T> {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await fn();
        } catch (error: any) {
            const isLastAttempt = i === maxRetries - 1;
            const isRetryableError = 
                error?.message?.includes('503') || 
                error?.message?.includes('overloaded') ||
                error?.message?.includes('UNAVAILABLE') ||
                error?.message?.includes('429');

            if (isLastAttempt || !isRetryableError) {
                throw error;
            }

            const delayMs = baseDelay * Math.pow(2, i);
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delayMs}ms...`);
            await delay(delayMs);
        }
    }
    throw new Error('Max retries reached');
}

export const generateTasksFromText = async (
    userPrompt: string,
    contextText: string,
    imageBase64?: string
): Promise<AIResponse> => {
    
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

    console.log('ü§ñ generateTasksFromText called');
    console.log('üìù User prompt:', userPrompt);
    console.log('üìÑ Context text length:', contextText.length);
    console.log('üñºÔ∏è Has image:', !!imageBase64);
    
    const contents: any[] = [{ text: `
–¢–´ ‚Äî –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${userPrompt}"
–ö–û–ù–¢–ï–ö–°–¢ (—Ç–µ–∫—Å—Ç —É—á–µ–±–Ω–∏–∫–∞): 
---
${contextText}
---

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –¢–ò–ü–û–í –ó–ê–î–ê–ù–ò–ô:

1. **fill-in-the-blank** (–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ):
   - –í textParts —á–µ—Ä–µ–¥—É—é—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–ø—É—Å–∫–∏
   - –ü—Ä–æ–ø—É—Å–∫ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è: { "text": "", "isAnswer": true }
   - –ü—Ä–∏–º–µ—Ä: [
       { "text": "√âl es ", "isAnswer": false },
       { "text": "", "isAnswer": true },
       { "text": ". Ellos son ", "isAnswer": false },
       { "text": "", "isAnswer": true },
       { "text": ".", "isAnswer": false }
     ]
   - –ù–ï –ü–ò–®–ò –ü–†–ê–í–ò–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –í text! –¢–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è isAnswer: true

2. **translate** (–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π):
   - textParts —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –û–î–ù–£ —á–∞—Å—Ç—å —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
   - –ü—Ä–∏–º–µ—Ä: [{ "text": "–Ø –¥–æ–º–∞, —è –¥–æ–≤–æ–ª–µ–Ω.", "isAnswer": false }]
   - –ù–ò–ö–û–ì–î–ê –Ω–µ –≤–∫–ª—é—á–∞–π –∏—Å–ø–∞–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ textParts!
   - –°—Ç—É–¥–µ–Ω—Ç —Å–∞–º –Ω–∞–ø–∏—à–µ—Ç –ø–µ—Ä–µ–≤–æ–¥

3. **plain-text** (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ —É—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ):
   - –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–ª–∏ —É—Å—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   - –ü—Ä–∏–º–µ—Ä: [{ "text": "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 35", "isAnswer": false }]

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ: √°, √©, √≠, √≥, √∫, √º, √±, ¬ø, ¬°
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ text
- –ò–∑–≤–ª–µ–∫–∞–π pageNumber –∏ exerciseNumber –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

–ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê:
- –ï—Å–ª–∏ "—É—á–∏—Ç—å —Å–ª–æ–≤–∞" ‚Üí –∑–∞–ø–æ–ª–Ω–∏ vocabulary, tasks –º–æ–∂–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å
- –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Üí —Å–æ–∑–¥–∞–≤–∞–π tasks

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –ó–ê–î–ê–ù–ò–ô:

–ü—Ä–∏–º–µ—Ä 1 - fill-in-the-blank:
{
  "instruction": "–û–±—Ä–∞–∑—É–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ",
  "type": "written",
  "pageNumber": "36",
  "exerciseNumber": "6",
  "items": [
    {
      "type": "fill-in-the-blank",
      "textParts": [
        { "text": "√âl es alem√°n. Ellos son ", "isAnswer": false },
        { "text": "", "isAnswer": true },
        { "text": ".", "isAnswer": false }
      ]
    }
  ]
}

–ü—Ä–∏–º–µ—Ä 2 - translate:
{
  "instruction": "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫",
  "type": "written",
  "pageNumber": "36",
  "exerciseNumber": "7",
  "items": [
    {
      "type": "translate",
      "textParts": [
        { "text": "–Ø –¥–æ–º–∞, —è –¥–æ–≤–æ–ª–µ–Ω.", "isAnswer": false }
      ]
    },
    {
      "type": "translate",
      "textParts": [
        { "text": "–ú—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –º—ã –∏–∑ –ö–∏—Ç–∞—è.", "isAnswer": false }
      ]
    }
  ]
}

–ü—Ä–∏–º–µ—Ä 3 - oral (—É—Å—Ç–Ω–æ–µ):
{
  "instruction": "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
  "type": "oral",
  "pageNumber": "37",
  "exerciseNumber": "8",
  "items": [
    {
      "type": "plain-text",
      "textParts": [
        { "text": "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 37 –∏ —É—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞", "isAnswer": false }
      ]
    }
  ]
}

–ü–û–ú–ù–ò: 
- –í fill-in-the-blank –ø—Ä–æ–ø—É—Å–∫–∏ –í–°–ï–ì–î–ê –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
- –í translate –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –ë–ï–ó –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
- –°—Ç—É–¥–µ–Ω—Ç —Å–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç –æ—Ç–≤–µ—Ç—ã!
` }];

    if (imageBase64) {
        contents.push({ inlineData: { mimeType: 'image/jpeg', data: imageBase64 } });
    }

    try {
        console.log('üåê Calling Gemini API with retry logic...');
        
        const response = await retryWithBackoff(async () => {
            return await ai.models.generateContent({
                model,
                contents: { parts: contents },
                config: { 
                    responseMimeType: "application/json", 
                    responseSchema,
                    temperature: 0.7
                }
            });
        }, 3, 2000);

        console.log('‚úÖ API Response received');
        
        let jsonResponse: AIResponse;
        try {
            jsonResponse = JSON.parse(response.text);
        } catch (parseError) {
            console.error('‚ùå Failed to parse JSON response:', response.text);
            throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        
        console.log('üìä Parsed JSON:', jsonResponse);

        const tasks: Task[] = (jsonResponse.tasks || []).map((task, index) => ({
            ...task,
            id: `task-${Date.now()}-${index}`,
            status: 'incomplete' as const,
            items: task.items.map(item => ({ ...item, userAnswer: '', userAnswers: [] }))
        }));

        const vocabulary: VocabularyItem[] = (jsonResponse.vocabulary || []).map((item, index) => ({
            ...item,
            id: `vocab-${Date.now()}-${index}`
        }));

        console.log('‚úÖ Final tasks:', tasks);
        console.log('‚úÖ Final vocabulary:', vocabulary);

        return { tasks, vocabulary };

    } catch (error: any) {
        console.error('‚ùå ERROR in generateTasksFromText:', error);
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.';
        
        if (error?.message?.includes('503') || error?.message?.includes('overloaded')) {
            errorMessage = '–°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.';
        } else if (error?.message?.includes('429')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        } else if (error?.message?.includes('401') || error?.message?.includes('API key')) {
            errorMessage = '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
        } else if (error?.message?.includes('400')) {
            errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.';
        } else if (error?.message) {
            errorMessage = error.message;
        }
        
        throw new Error(errorMessage);
    }
};