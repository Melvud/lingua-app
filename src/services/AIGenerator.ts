import { GoogleGenAI, Type } from "@google/genai";
import type { Task, VocabularyItem } from '../types';

console.log('üîë API Key from env:', process.env.API_KEY ? 'EXISTS' : 'NOT FOUND');

const model = 'gemini-2.5-flash';

const responseSchema = {
    type: Type.OBJECT,
    properties: {
        tasks: {
            type: Type.ARRAY,
            description: "–°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.",
            items: {
                type: Type.OBJECT,
                properties: {
                    instruction: { type: Type.STRING }, 
                    type: { type: Type.STRING, enum: ['written', 'oral'] },
                    pageNumber: { type: Type.STRING }, 
                    exerciseNumber: { type: Type.STRING },
                    items: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                type: { type: Type.STRING, enum: ['fill-in-the-blank', 'translate', 'plain-text'] },
                                textParts: {
                                    type: Type.ARRAY,
                                    items: {
                                        type: Type.OBJECT,
                                        properties: { 
                                            text: { type: Type.STRING }, 
                                            isAnswer: { type: Type.BOOLEAN } 
                                        },
                                        required: ['text', 'isAnswer']
                                    }
                                }
                            },
                            required: ['type', 'textParts']
                        }
                    }
                },
                required: ['instruction', 'type', 'items']
            }
        },
        vocabulary: {
            type: Type.ARRAY,
            description: "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å.",
            items: {
                type: Type.OBJECT,
                properties: {
                    word: { type: Type.STRING, description: "–°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º." },
                    translation: { type: Type.STRING, description: "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π." },
                    context: { type: Type.STRING, description: "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞." }
                },
                required: ['word', 'translation', 'context']
            }
        }
    }
};

interface AIResponse {
    tasks: Task[];
    vocabulary: VocabularyItem[];
}

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

async function retryWithBackoff<T>(
    fn: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 2000
): Promise<T> {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await fn();
        } catch (error: any) {
            const isLastAttempt = i === maxRetries - 1;
            const isRetryableError = 
                error?.message?.includes('503') || 
                error?.message?.includes('overloaded') ||
                error?.message?.includes('UNAVAILABLE') ||
                error?.message?.includes('429');

            if (isLastAttempt || !isRetryableError) {
                throw error;
            }

            const delayMs = baseDelay * Math.pow(2, i);
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delayMs}ms...`);
            await delay(delayMs);
        }
    }
    throw new Error('Max retries reached');
}

export const generateTasksFromText = async (
    userPrompt: string,
    contextText: string,
    imageBase64?: string
): Promise<AIResponse> => {
    
    // ** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–¥–µ—Å—å **
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

    console.log('ü§ñ generateTasksFromText called');
    console.log('üìù User prompt:', userPrompt);
    console.log('üìÑ Context text length:', contextText.length);
    console.log('üñºÔ∏è Has image:', !!imageBase64);
    
    const contents: any[] = [{ text: `
        –¢–´ ‚Äî –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

        –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${userPrompt}"
        –ö–û–ù–¢–ï–ö–°–¢ (—Ç–µ–∫—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–±–Ω–∏–∫–∞): 
        ---
        ${contextText}
        ---

        –ü–†–ê–í–ò–õ–ê:
        1.  **–¢–û–ß–ù–û–°–¢–¨:** –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç –∏–∑ –ö–û–ù–¢–ï–ö–°–¢–ê **–±—É–∫–≤–∞ –≤ –±—É–∫–≤—É**. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (√°, √©, √≠, √≥, √∫, √º, √±, ¬ø, ¬°).
        2.  **–ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê:**
            -   –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—á–∏—Ç—å —Å–ª–æ–≤–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—É—á–∏–º —Å–ª–æ–≤–∞ —Å—Ç—Ä 27 —É–ø—Ä 5"), —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥. –ó–∞–ø–æ–ª–Ω–∏ –º–∞—Å—Å–∏–≤ 'vocabulary'. –í 'context' –¥–æ–±–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ —ç—Ç–æ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ó–∞–¥–∞–Ω–∏—è 'tasks' –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å.
            -   –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ 'tasks', –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ.
        3.  **–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–•:** –ò–∑–≤–ª–µ–∫–∏ 'pageNumber' –∏ 'exerciseNumber' –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.
        4.  **–ë–ï–ó –ù–£–ú–ï–†–ê–¶–ò–ò:** –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω—É–º–µ—Ä–∞—Ü–∏—é ("1.", "2.") –≤ –ø–æ–ª–µ 'text'.
    ` }];

    if (imageBase64) {
        contents.push({ inlineData: { mimeType: 'image/jpeg', data: imageBase64 } });
    }

    try {
        console.log('üåê Calling Gemini API with retry logic...');
        
        const response = await retryWithBackoff(async () => {
            return await ai.models.generateContent({
                model,
                contents: { parts: contents },
                config: { 
                    responseMimeType: "application/json", 
                    responseSchema,
                    temperature: 0.7
                }
            });
        }, 3, 2000);

        console.log('‚úÖ API Response received');
        
        let jsonResponse: AIResponse;
        try {
            jsonResponse = JSON.parse(response.text);
        } catch (parseError) {
            console.error('‚ùå Failed to parse JSON response:', response.text);
            throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        
        console.log('üìä Parsed JSON:', jsonResponse);

        const tasks: Task[] = (jsonResponse.tasks || []).map((task, index) => ({
            ...task,
            id: `task-${Date.now()}-${index}`,
            status: 'incomplete' as const,
            items: task.items.map(item => ({ ...item, userAnswer: '' }))
        }));

        const vocabulary: VocabularyItem[] = (jsonResponse.vocabulary || []).map((item, index) => ({
            ...item,
            id: `vocab-${Date.now()}-${index}`
        }));

        console.log('‚úÖ Final tasks:', tasks);
        console.log('‚úÖ Final vocabulary:', vocabulary);

        return { tasks, vocabulary };

    } catch (error: any) {
        console.error('‚ùå ERROR in generateTasksFromText:', error);
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.';
        
        if (error?.message?.includes('503') || error?.message?.includes('overloaded')) {
            errorMessage = '–°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.';
        } else if (error?.message?.includes('429')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        } else if (error?.message?.includes('401') || error?.message?.includes('API key')) {
            errorMessage = '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
        } else if (error?.message?.includes('400')) {
            errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.';
        } else if (error?.message) {
            errorMessage = error.message;
        }
        
        throw new Error(errorMessage);
    }
};