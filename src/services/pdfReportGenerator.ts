import type { Task } from '../types';

declare const window: any;

export const generatePdfReport = (tasks: Task[]): void => {
    console.log('üìÑ ========== PDF GENERATION START ==========');
    console.log('üìã Received tasks:', tasks);
    console.log('üìã Tasks count:', tasks.length);
    
    try {
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º jsPDF
        console.log('Step 1: Getting jsPDF constructor...');
        let jsPDF: any = null;
        
        if (window.jspdf && window.jspdf.jsPDF) {
            console.log('‚úÖ Found at window.jspdf.jsPDF');
            jsPDF = window.jspdf.jsPDF;
        } else if (window.jsPDF) {
            console.log('‚úÖ Found at window.jsPDF');
            jsPDF = window.jsPDF;
        } else {
            console.error('‚ùå jsPDF not found anywhere!');
            console.log('Available window properties:', Object.keys(window).filter(k => k.toLowerCase().includes('pdf')));
            throw new Error("jsPDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        console.log('Step 2: Creating PDF document...');
        const doc = new jsPDF();
        console.log('‚úÖ Document created:', doc);
        
        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º autoTable
        console.log('Step 3: Checking autoTable...');
        console.log('doc.autoTable type:', typeof doc.autoTable);
        console.log('doc.autoTable:', doc.autoTable);
        
        if (typeof doc.autoTable !== 'function') {
            console.error('‚ùå autoTable is not a function!');
            console.log('Available doc methods:', Object.keys(doc).filter(k => typeof doc[k] === 'function'));
            throw new Error("autoTable plugin –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        console.log('‚úÖ autoTable is available');

        // –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ë–ï–ó –ö–ê–°–¢–û–ú–ù–û–ì–û –®–†–ò–§–¢–ê)
        console.log('Step 4: Adding header...');
        doc.setFont('helvetica'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        doc.setFontSize(18);
        doc.text('–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö', 105, 20, { align: 'center' });
        doc.setFontSize(12);
        doc.text('–°—Ç—É–¥–µ–Ω—Ç: –†–∞—Ñ–∞—ç–ª—å', 14, 35);
        doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`, 14, 42);
        console.log('‚úÖ Header added');

        // –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–£–ü–†–û–©–ï–ù–ù–ê–Ø)
        console.log('Step 5: Preparing table data...');
        const tableData: string[][] = [];
        
        tasks.forEach((task, taskIdx) => {
            console.log(`Processing task ${taskIdx + 1}/${tasks.length}:`, task.instruction);
            
            task.items.forEach((item, itemIdx) => {
                console.log(`  Processing item ${itemIdx + 1}:`, item.type);
                
                let taskTitle = task.instruction || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                let itemContent = '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ';
                let userAnswer = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                
                // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                try {
                    if (item.type === 'fill-in-the-blank') {
                        const text = item.textParts?.map(p => p.text || '').join('') || '';
                        itemContent = text.substring(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        const answers = item.userAnswers?.filter(a => a?.trim()).join(', ');
                        userAnswer = answers || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    } else if (item.type === 'translate') {
                        itemContent = item.textParts?.[0]?.text?.substring(0, 100) || '';
                        userAnswer = item.userAnswer?.substring(0, 100) || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    }
                } catch (err) {
                    console.error('Error processing item:', err);
                    itemContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                const row = [
                    itemIdx === 0 ? taskTitle : '',
                    itemContent,
                    userAnswer
                ];
                
                console.log(`  Adding row:`, row);
                tableData.push(row);
            });
        });

        console.log('üìä Total table rows:', tableData.length);
        console.log('üìä Table data sample:', tableData.slice(0, 2));

        // –®–∞–≥ 6: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        console.log('Step 6: Creating table...');
        
        try {
            doc.autoTable({
                startY: 55,
                head: [['–ó–∞–¥–∞–Ω–∏–µ', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '–û—Ç–≤–µ—Ç']],
                body: tableData,
                theme: 'grid',
                styles: {
                    font: 'helvetica',
                    fontSize: 10,
                    cellPadding: 3
                },
                headStyles: {
                    fillColor: [41, 128, 185]
                }
            });
            console.log('‚úÖ Table created successfully');
        } catch (tableError) {
            console.error('‚ùå Error creating table:', tableError);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${tableError instanceof Error ? tableError.message : 'Unknown'}`);
        }

        // –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        console.log('Step 7: Saving PDF...');
        const filename = `–æ—Ç—á–µ—Ç-${Date.now()}.pdf`;
        console.log('Filename:', filename);
        
        doc.save(filename);
        console.log('‚úÖ PDF saved successfully');
        console.log('üìÑ ========== PDF GENERATION END ==========');
        
    } catch (error) {
        console.error('‚ùå ========== PDF GENERATION FAILED ==========');
        console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);
        console.error('Error message:', error instanceof Error ? error.message : String(error));
        console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');
        
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        throw error;
    }
};