// src/components/TaskGenerator.tsx
import React, { useState, useRef, useEffect } from 'react';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { getCachedOrGenerateTasks } from '../services/AIGenerator'; 
import { extractTextUpToPage, extractTextFromFile, convertImageToBase64 } from '../services/fileProcessor';
import type { Task, VocabularyItem } from '../types';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Storage –∏ Firestore
import { storage, db } from '../config/firebase';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from 'firebase/firestore';


interface TaskGeneratorProps {
  onGenerateTasks: (tasks: Task[], vocabulary: VocabularyItem[]) => void;
  onNavigateToPage: (page: number) => void;
  sharedFiles: Array<{ name: string; url: string }>;
  sharedInstruction: string;
  onUpdateSharedFiles: (files: File[]) => void;
  onUpdateSharedInstruction: (instruction: string) => void;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—á–µ–±–Ω–∏–∫–∞ –∏–∑ Firestore
interface Textbook {
  id: string;
  fileName: string;
  downloadURL: string;
}

const TaskGenerator: React.FC<TaskGeneratorProps> = ({
  onGenerateTasks,
  onNavigateToPage,
  sharedFiles,
  sharedInstruction,
  onUpdateSharedFiles,
  onUpdateSharedInstruction,
}) => {
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [instruction, setInstruction] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—á–µ–±–Ω–∏–∫–æ–≤
  const [availableTextbooks, setAvailableTextbooks] = useState<Textbook[]>([]);
  const [selectedTextbookId, setSelectedTextbookId] = useState<string | null>(null);
  const [loadingTextbooks, setLoadingTextbooks] = useState(false);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ sharedData
  useEffect(() => {
    if (sharedInstruction !== undefined && sharedInstruction !== instruction) {
      setInstruction(sharedInstruction);
    }
  }, [sharedInstruction]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤ –∏–∑ Firestore –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const fetchTextbooks = async () => {
      setLoadingTextbooks(true);
      try {
        // –ó–∞–ø—Ä–æ—Å –∫ Firestore, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
        const q = query(collection(db, "textbooks"), orderBy("createdAt", "desc"));
        const querySnapshot = await getDocs(q);
        const books = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Textbook));
        setAvailableTextbooks(books);
      } catch (err: any) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–±–Ω–∏–∫–æ–≤:", err);
        // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å–∞ Firestore
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —É—á–µ–±–Ω–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã Firestore.");
      }
      setLoadingTextbooks(false);
    };
    fetchTextbooks();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length > 0) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      setSelectedTextbookId(null);
      const newFiles = [...uploadedFiles, ...files];
      setUploadedFiles(newFiles);
      setError('');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  const handleRemoveFile = (index: number) => {
    const newFiles = uploadedFiles.filter((_, i) => i !== index);
    setUploadedFiles(newFiles);
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É (Storage + Firestore)
  const handleSaveToLibrary = async (file: File, index: number) => {
    setLoading(true);
    setError('');
    try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Firebase Storage
        const storagePath = `textbooks/${Date.now()}_${file.name}`;
        const storageRef = ref(storage, storagePath);
        await uploadBytes(storageRef, file);
        const downloadURL = await getDownloadURL(storageRef);

        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ Firestore
        const docRef = await addDoc(collection(db, 'textbooks'), {
            fileName: file.name,
            storagePath: storagePath,
            downloadURL: downloadURL,
            createdAt: serverTimestamp(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        });
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º UI (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞)
        setAvailableTextbooks(prev => [{ id: docRef.id, fileName: file.name, downloadURL }, ...prev]);
        
        // 4. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        handleRemoveFile(index);
        
        // 5. –°—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç —É—á–µ–±–Ω–∏–∫
        setSelectedTextbookId(docRef.id);

    } catch (err: any) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: " + err.message);
    }
    setLoading(false);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–∏–∫–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  const handleSelectTextbook = (e: React.ChangeEvent<HTMLSelectElement>) => {
      const bookId = e.target.value;
      if (bookId) {
          setSelectedTextbookId(bookId);
          // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
          setUploadedFiles([]); 
      } else {
          setSelectedTextbookId(null);
      }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  const handleInstructionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setInstruction(value);
    onUpdateSharedInstruction(value);
  };

  // –§—É–Ω–∫—Ü–∏—è-–ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getPageNumberFromInstruction = (text: string): number | null => {
    const matches = text.match(/—Å—Ç—Ä(?:–∞–Ω–∏—Ü–∞|\.)?\s*(\d+)/gi);
    if (!matches) return null;
    const lastMatch = matches[matches.length - 1];
    const pageNum = lastMatch.match(/\d+/);
    return pageNum ? parseInt(pageNum[0], 10) : null;
  };

  // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
  const handleGenerate = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω—É–∂–µ–Ω –ª–∏–±–æ —Ñ–∞–π–ª, –ª–∏–±–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    if (uploadedFiles.length === 0 && !instruction.trim() && !selectedTextbookId) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é');
      return;
    }

    setLoading(true);
    setError('');

    try {
      let contextText = '';
      let imageBase64: string | undefined;
      
      const lastPageMentioned = getPageNumberFromInstruction(instruction);
      
      let pdfFile: File | undefined;

      // ---------------------------------------------
      // 1. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–°–¢–û–ß–ù–ò–ö PDF
      // ---------------------------------------------
      if (selectedTextbookId) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—á–µ–±–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        console.log("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –∏–∑ Firebase Storage...");
        const book = availableTextbooks.find(b => b.id === selectedTextbookId);
        if (!book) throw new Error("–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ URL –∏–∑ Storage
        const response = await fetch(book.downloadURL);
        if (!response.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–±–Ω–∏–∫: ${response.statusText}`);
        
        const blob = await response.blob();
        
        // "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º" File –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç `extractTextUpToPage`
        pdfFile = new File([blob], book.fileName, { type: 'application/pdf' });

      } else {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        pdfFile = uploadedFiles.find(f => f.type === 'application/pdf');
      }
      
      // –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageFile = uploadedFiles.find(f => f.type.startsWith('image/'));

      // ---------------------------------------------
      // 2. –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –ò–ó –§–ê–ô–õ–û–í
      // ---------------------------------------------
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
      if (pdfFile) {
        if (lastPageMentioned) {
          // +1, —Ç.–∫. extractTextUpToPage –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          const readUpToPage = lastPageMentioned + 1; 
          console.log(`üìö Reading PDF up to page ${readUpToPage}...`);
          contextText = await extractTextUpToPage(pdfFile, readUpToPage);

          if (!contextText.trim()) {
            setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${readUpToPage}. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.`);
            setLoading(false);
            return;
          }
        } else {
          setError('–î–ª—è PDF —Ñ–∞–π–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å—Ç—Ä 35"), —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.');
          setLoading(false);
          return;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (imageFile) {
        imageBase64 = await convertImageToBase64(imageFile);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .docx, .txt)
      for (const file of uploadedFiles.filter(f => f.type !== 'application/pdf' && !f.type.startsWith('image/'))) {
        contextText += await extractTextFromFile(file) + '\n';
      }

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ò–ò –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      if (!contextText.trim() && !imageBase64) {
        contextText = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
      }

      // ---------------------------------------------
      // 3. –í–´–ó–´–í–ê–ï–ú –ò–ò –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú
      // ---------------------------------------------
      const { tasks, vocabulary } = await getCachedOrGenerateTasks(
        instruction,
        contextText,
        imageBase64
      );

      // ---------------------------------------------
      // 4. –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
      // ---------------------------------------------
      if (tasks.length === 0 && vocabulary.length === 0) {
        setError('–ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–∞–π–ª–µ.');
      } else {
        onGenerateTasks(tasks, vocabulary);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        setInstruction('');
        setUploadedFiles([]);
        setSelectedTextbookId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–µ–±–Ω–∏–∫–∞
        onUpdateSharedInstruction('');
        
        // –û—á–∏—â–∞–µ–º input[type=file]
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      }
    } catch (err: any) {
      console.error('Error generating tasks:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.');
    } finally {
      setLoading(false);
    }
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–¥–ª—è Textbook.tsx)
  const handlePageNavigate = () => {
    const pageNumber = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:') || '1', 10);
    if (!isNaN(pageNumber) && pageNumber > 0) {
      onNavigateToPage(pageNumber);
    }
  };

  return (
    <div className="p-6">
      <div className="max-w-4xl mx-auto space-y-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ" */}
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <span className="text-3xl">ü§ñ</span>
            –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π
          </h2>
          <button
            onClick={handlePageNavigate}
            className="text-sm bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
            </svg>
            –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          </button>
        </div>
        
        {/* –ë–ª–æ–∫: –í—ã–±–æ—Ä —É—á–µ–±–Ω–∏–∫–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-300 dark:border-gray-600">
          <label className="block">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
              üìö –í—ã–±—Ä–∞—Ç—å —É—á–µ–±–Ω–∏–∫ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            </span>
            <select
              value={selectedTextbookId || ''}
              onChange={handleSelectTextbook}
              disabled={loadingTextbooks || uploadedFiles.length > 0 || loading}
              className="w-full bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg p-3 text-gray-900 dark:text-white disabled:opacity-50"
            >
              <option value="">{loadingTextbooks ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "-- –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª --"}</option>
              {availableTextbooks.map(book => (
                <option key={book.id} value={book.id}>
                  {book.fileName}
                </option>
              ))}
            </select>
          </label>
        </div>
        
        <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
          –ò–õ–ò
        </p>

        {/* –ë–ª–æ–∫: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
        <div 
          className={`bg-white dark:bg-gray-800 rounded-lg p-4 border-2 border-dashed border-gray-300 dark:border-gray-600 ${selectedTextbookId ? 'opacity-50' : ''}`}
        >
          <label className="block mb-2">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (PDF, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            </span>
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept=".pdf,.docx,.doc,.png,.jpg,.jpeg"
              onChange={handleFileUpload}
              disabled={!!selectedTextbookId || loading} // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —É—á–µ–±–Ω–∏–∫
              className="block w-full text-sm text-gray-500 dark:text-gray-400 mt-2
                file:mr-4 file:py-2 file:px-4
                file:rounded-lg file:border-0
                file:text-sm file:font-semibold
                file:bg-blue-50 file:text-blue-700
                hover:file:bg-blue-100
                dark:file:bg-blue-900 dark:file:text-blue-300
                cursor-pointer disabled:cursor-not-allowed"
            />
          </label>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ —Ñ–∞–π–ª–æ–≤ */}
          {uploadedFiles.length > 0 && (
            <div className="mt-3 space-y-2">
              <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({uploadedFiles.length}):
              </p>
              {uploadedFiles.map((file, index) => (
                <div
                  key={index}
                  className="flex items-center justify-between bg-blue-50 dark:bg-blue-900/20 p-2 rounded"
                >
                  <span className="text-sm text-gray-700 dark:text-gray-300 truncate flex-1">
                    üìÑ {file.name}
                  </span>
                  <div className="flex-shrink-0 ml-2 flex items-center gap-2">
                    {/* –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É" (—Ç–æ–ª—å–∫–æ –¥–ª—è PDF) */}
                    {file.type === 'application/pdf' && (
                      <button
                        onClick={() => handleSaveToLibrary(file, index)}
                        disabled={loading}
                        className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 disabled:opacity-50"
                        title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                        </svg>
                      </button>
                    )}
                    {/* –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" */}
                    <button
                      onClick={() => handleRemoveFile(index)}
                      disabled={loading}
                      className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ü–æ–ª–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-300 dark:border-gray-600">
          <label className="block">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
              üí≠ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–ò (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è PDF)
            </span>
            <textarea
              value={instruction}
              onChange={handleInstructionChange}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç—Ä 35-36..."
              className="w-full bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg p-3 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[100px] resize-y"
              rows={4}
            />
          </label>
        </div>

        {/* –ë–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ */}
        {error && (
          <div className="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-lg p-3">
            <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è" */}
        <button
          onClick={handleGenerate}
          disabled={loading || (uploadedFiles.length === 0 && !instruction.trim() && !selectedTextbookId)}
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-400 disabled:to-gray-400 disabled:cursor-not-allowed text-white font-bold py-4 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl disabled:shadow-none flex items-center justify-center gap-2 text-lg"
        >
          {loading ? (
            <>
              <svg className="animate-spin h-6 w-6" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
              </svg>
              {selectedTextbookId ? "–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω–∏–∫–∞..." : "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π..."}
            </>
          ) : (
            <>
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
            </>
          )}
        </button>

        <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
          ‚ÑπÔ∏è –§–∞–π–ª—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∏–¥–Ω—ã –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–∞—Ä—ã
        </p>
      </div>
    </div>
  );
};

export default TaskGenerator;